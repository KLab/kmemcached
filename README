Kernel Memcached
Anthony Chivetta <anthony@chivetta.org>

Introduction
============

This is an implementation of a memcached server as a Linux kernel module.
Memcached is an in-memory key/value cache service used by nearly all large
websites to cache their data.  (See http://memcached.org/ for more information
about memcached.)  Memcached's use case means that it is highly
latency-sensitive.  Further, the dumb nature of the cache means that very little
of the time spent servicing a request is spent doing business processing.  These
two factors make memcached a prime candidate to move into the kernel as a means
of removing sources of latency and experimenting with different techniques for
servicing requests.

Usually, in-kernel servers are considered a Bad Thing.  On the security front,
if there exists a vulnerability in an in-kernel server this vulnerability would
automatically grant full privileges to the machine and potentially allow the
injection of arbitrary kernel code.  However, memcached was never designed to be
exposed to untrusted users and so this problem should be solved by simple
firewalling.  Stability and complexity are issues -- writing robust kernel code
is generally considered more difficult than writing equivalent user-space code
and bugs can have disastrous effect.  Yet memcached's simple protocol and
application logic may minimize this issue.  Finally, an in-kernel server is
typically much harder to setup and maintain than a user-space server.  In the
case of memcached, the users are typically seasoned system administrators and so
this is also of minimal concern.

Given that an in-kernel memcached may not be a horrible idea and presents some
compelling opportunities for latency reduction, a prototype of such a server has
been developed.  This code is still in early alpha stages but should provide
fertile ground for anyone wanting to experiment with in-kernel caching
techniques.

Structure
=========

There are four main components:

Core: The core of the module is contained in `main.c`.  This is responsible for
startup and teardown.  It interfaces with the kernel's networking layer and
provides dispatch for client work.  You should start here to get a feel for the
code.  All code in this file is original to the project.

libmemcachedprotocol: The folder `libmp/` contains the library used to parse incoming memcached
requests.  It was taken from the libmemcached (libmemcached.org) library and
modified to run in the kernel.  The file `protocol_handler.c` contains the
default_send and default_recv functions which write to a kernel socket and may
be of interest.

Memcached Logic: The file `interface.c` contains the implementation of the
memcached business logic.  This is also pulled from the libmemcached source.

Storage Engine: The file `storage.c` contains a hash table implementation taken
from the memcached source code. 

Current Limitations
===================

This code is not yet anywhere near production ready, however it does pass the
memcapable binary tests.  Most of the significant limitations are documented by
comments containing the string "TODO" (try `make todo` to see them).  Some of
the most significant include:

 - Multi-threading
 - Support for hash table expansion
 - Leaking disconnected client structures
 - Eviction or expiration of items

Any help to fix these limitations would be appreciated.

Possible Future Investigations
==============================

Some avenues for future development include

 - Paging aware storage structures
 - Tighter integration with sockets, scheduler or VM system.

Licencing
=========

Some code has been adopted from the memcached and libmemcache projects.  All
code is licenced under the BSD license (see the `LICENSE` file).  Additionally,
all code is dual licenced under the GNU General Public License v2.
